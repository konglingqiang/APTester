#coding=gbk
import sys
from PyQt4.QtCore import * 
from PyQt4.QtGui import *
import telnetlib
import os
import time
import string
from ctypes import *
from myconfig import *

#how_to_do_test 0:only 2.4G;  1:only 5G;  2:both 2.4G and 5G
#how_to_do_test = 2

test_mode = 2
#test_mode = 5
debug = 1

s = '''
global_pcdac_2G = "30"
global_pcdac_5G = "40"
#global_pcdac = "30"
global_pcdac = ""
'''

s = '''
freq_5g = ["5180", "5500", "5805"]
rate_5g = ["54", "t7"]
chain_5g = ["1" "2"]

freq_2g_ht20 = ["2412","2437","2462"]
rate_2g_ht20 = ["11s","6","t0","t7"]

freq_2g_ht40 = ["2412","2437","2452"]
rate_2g_ht40 = ["f0", "f7"]

chain = ["1", "2"]
'''

rate_80211b = ["1l", "2l", "5.5l", "11l", "11s"]
rate_80211g = ["6","9","12","18","24","36","48","54"]
rate_80211a = ["6","9","12","18","24","36","48","54"]
rate_80211n_ht20 = ["t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","t14","t15"]
rate_80211n_ht40 = ["f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15"]

capture_time = {"1l":800, "2l":600, "5.5l":400, "11l":200, "11s":200,
    "6":690,"9":620,"12":550,"18":480,"24":410,"36":340,"48":270,"54":200,
    "t0":550,"t1":500,"t2":450,"t3":400,"t4":350,"t5":300,"t6":250,"t7":200,"t8":200,"t9":200,"t10":200,"t11":200,"t12":200,"t13":200,"t14":200,"t15":200,
    "f0":550,"f1":500,"f2":450,"f3":400,"f4":350,"f5":300,"f6":250,"f7":200,"f8":200,"f9":200,"f10":200,"f11":200,"f12":200,"f13":200,"f14":200,"f15":200}
s = '''
vsg_power_level = {"5l":-90,"11l":-90,"6":-82,"54":-65,"t7":-65,"t8":-82,"t15":-64,"t16":-82,"t23":-64,"f7":-64,"f8":-79,"f15":-61,"f16":-79,"f23":-61,
    "vt0":-82,"vt8":-59,"vt10":-82,"vt18":-59,"vt20":-82,"vt29":-59,"vf0":-79,"vf9":-54,"vf10":-79,"vf19":-54,"vf20":-79,"vf29":-54,"ve0":-76,"ve9":-51,
    "ve10":-76,"ve19":-51,"ve20":-76,"ve29":-51,"vt7":-65,"vf7":-62,"ve7":-59}
'''

tx_evm_limit = {"6":-5,"54":-25,"11s":-10,"t0":-7,"t4":-18,"t7":-27,"t8":-7,"t12":-18,"t15":-28,"t16":-7,"t20":-18,"t23":-28,"f0":-7,"f7":-28,"f8":-7,
    "f12":-18,"f15":-28,"f16":-7,"f20":-18,"f23":-28,"vt0":-5,"vt8":-30,"vt10":-5,"vt18":-30,"vt20":-5,"vt29":-32,"vf0":-5,"vf9":-32,"vf10":-5,"vf19":-32,
    "vf20":-5,"vf29":-32,"ve0":-5,"ve9":-32,"ve10":-5,"ve19":-32,"ve20":-5,"ve29":-32}

#txppm_limit = 20

dict_2g_tx = {}

#path_loss = 16
#limit = 2.5

path_loss_2g = 18
path_loss_5g = 20

#setting: lost, limit
ht20_2g_setting = (path_loss_2g, 2.5)
ht40_2g_setting = (path_loss_2g, 2)
ht20_5g_setting = (path_loss_5g, 2.5)
ht40_5g_setting = (path_loss_5g, 2)
no_setting = (0,0)

#最后的测试结果
test_result_fail = 0

jiaozhun_5g_power = {"5180_1":(1.4, 18.3),"5180_2":(4.9, 18.2),"5240_1":(3.7, 18.1),"5240_2":(6.2, 17.5),"5260_1":(4.4, 18.3),"5260_2":(5.9, 18.1),
    "5320_1":(5.9, 18.2),"5320_2":(6.1, 17.7),"5500_1":(9.6, 16.8),"5500_2":(6.8, 17.1),"5700_1":(9.1, 15.7),"5700_2":(3.0, 16.2),"5745_1":(8.9, 16.1),
    "5745_2":(2.6, 15.7),"5805_1":(7.9, 16.1),"5805_2":(0.8, 15.8)}

#中英文unicode宽度，用于输出对齐
widths = [
    (126,    1), (159,    0), (687,     1), (710,   0), (711,   1), 
    (727,    0), (733,    1), (879,     0), (1154,  1), (1161,  0), 
    (4347,   1), (4447,   2), (7467,    1), (7521,  0), (8369,  1), 
    (8426,   0), (9000,   1), (9002,    2), (11021, 1), (12350, 2), 
    (12351,  1), (12438,  2), (12442,   0), (19893, 2), (19967, 1),
    (55203,  2), (63743,  1), (64106,   2), (65039, 1), (65059, 0),
    (65131,  2), (65279,  1), (65376,   2), (65500, 1), (65510, 2),
    (120831, 1), (262141, 2), (1114109, 1),
]

def get_width( o ):
    """Return the screen column width for unicode ordinal o."""
    global widths
    if o == 0xe or o == 0xf:
        return 0
    for num, wid in widths:
        if o <= num:
            return wid
    return 1

def total_width( s ):
    t = 0
    i = 0
    while(i<len(s)):
        t+=get_width(ord(s[i]))
        i=i+1
    return t

myconfig = {"mac":"00:11:22:33:44:88",
            "rate":"HT20",
            "channel":"1",
            "country":"CN",
            "ssid":"BDCOM",
            "wanip":"172.16.20.216"}
        
class Worker(QThread): 
    def __init__(self, parent = None): 
        QThread.__init__(self, parent) 
        self.ip = '192.168.2.1'
    def __del__(self): 
        self.wait() 
    def render(self,myip):
        try:
            self.ip = str(myip)
        except  Exception as e:
            self.printstr(u'抱歉，测试出错了！\n',QColor(255, 0, 0, 220))
            self.printstr(u"error: {0}\n".format(e),QColor(255, 0, 0, 220))
            self.emit(SIGNAL("terminated()")) 
            return
        self.start() 
    def run(self): 
        #self.protest()
        self.do_protest()
    def printstr(self,mystr,color):
        self.emit(SIGNAL("output"),mystr,color) 
    
    def do_protest(self):
        global test_mode
        global test_result_fail
        testconfig = TestConf()
        how_to_do_test = testconfig.get_howtotest()
        test_result_fail = 0
        
        #初始化测试仪器的dll
        self.dll_init()
        self.dll_getversion()
        self.mask_dll_init()
        
        if(how_to_do_test == '0' or how_to_do_test == '2'):
            test_mode = 2
            self.protest()
        if(how_to_do_test == '1' or how_to_do_test == '2'):
            test_mode = 5
            self.protest()
        
        dll.LP_Term()
        write_art = testconfig.get_write_art()
        
    
    def do_get_setting(self):
        global test_mode
        global global_pcdac_2G,global_pcdac_5G, global_pcdac
        if(test_mode == 2):
            global_pcdac = global_pcdac_2G
        else:
            global_pcdac = global_pcdac_5G
    
    def get_table_line_num(self, testmode, testwhat):
        testconfig = TestConf()
        if(testmode == "2G"):
            if(testwhat == "jiaozhun"):
                return 0
            elif(testwhat == "pinpian_jiaozhun"):
                return 1
            elif(testwhat == "tx_ht20"):
                line = 1+testconfig.get_num_of_something("2G","tx_ht20_freq")*testconfig.get_num_of_something("2G","tx_ht20_rate")*testconfig.get_num_of_something("2G","tx_ht20_chain")
                return line
            elif(testwhat == "tx_ht40"):
                line = 1+testconfig.get_num_of_something("2G","tx_ht20_freq")*testconfig.get_num_of_something("2G","tx_ht20_rate")*testconfig.get_num_of_something("2G","tx_ht20_chain")+\
                         testconfig.get_num_of_something("2G","tx_ht40_freq")*testconfig.get_num_of_something("2G","tx_ht40_rate")*testconfig.get_num_of_something("2G","tx_ht40_chain")
                return line
            elif(testwhat == "rx"):
                line = 1+testconfig.get_num_of_something("2G","tx_ht20_freq")*testconfig.get_num_of_something("2G","tx_ht20_rate")*testconfig.get_num_of_something("2G","tx_ht20_chain")+\
                         testconfig.get_num_of_something("2G","tx_ht40_freq")*testconfig.get_num_of_something("2G","tx_ht40_rate")*testconfig.get_num_of_something("2G","tx_ht40_chain")+\
                         testconfig.get_num_of_something("2G","rx_freq")*testconfig.get_num_of_something("2G","rx_rate")*testconfig.get_num_of_something("2G","rx_chain")
                return line
        else:
            how_to_test = testconfig.get_howtotest()
            if(how_to_test == "1"):
                if(testwhat == "jiaozhun"):
                    return 0
                elif(testwhat == "pinpian_jiaozhun"):
                    return 1
                elif(testwhat == "tx_ht20"):
                    line = 1+testconfig.get_num_of_something("5G","tx_ht20_freq")*testconfig.get_num_of_something("5G","tx_ht20_rate")*testconfig.get_num_of_something("5G","tx_ht20_chain")
                    return line
                elif(testwhat == "tx_ht40"):
                    line = 1+testconfig.get_num_of_something("5G","tx_ht20_freq")*testconfig.get_num_of_something("5G","tx_ht20_rate")*testconfig.get_num_of_something("5G","tx_ht20_chain")+\
                         testconfig.get_num_of_something("5G","tx_ht40_freq")*testconfig.get_num_of_something("5G","tx_ht40_rate")*testconfig.get_num_of_something("5G","tx_ht40_chain")
                    return line
                elif(testwhat == "rx"):
                    line = 1+testconfig.get_num_of_something("5G","tx_ht20_freq")*testconfig.get_num_of_something("5G","tx_ht20_rate")*testconfig.get_num_of_something("5G","tx_ht20_chain")+\
                         testconfig.get_num_of_something("5G","tx_ht40_freq")*testconfig.get_num_of_something("5G","tx_ht40_rate")*testconfig.get_num_of_something("5G","tx_ht40_chain")+\
                         testconfig.get_num_of_something("5G","rx_freq")*testconfig.get_num_of_something("5G","rx_rate")*testconfig.get_num_of_something("5G","rx_chain")
                    return line
            elif(how_to_test == "2"):
                num_2G = 2+testconfig.get_num_of_something("2G","tx_ht20_freq")*testconfig.get_num_of_something("2G","tx_ht20_rate")*testconfig.get_num_of_something("2G","tx_ht20_chain")+\
                         testconfig.get_num_of_something("2G","tx_ht40_freq")*testconfig.get_num_of_something("2G","tx_ht40_rate")*testconfig.get_num_of_something("2G","tx_ht40_chain")+\
                         testconfig.get_num_of_something("2G","rx_freq")*testconfig.get_num_of_something("2G","rx_rate")*testconfig.get_num_of_something("2G","rx_chain")
                if(testwhat == "jiaozhun"):
                    return num_2G
                elif(testwhat == "pinpian_jiaozhun"):
                    return 1+num_2G
                elif(testwhat == "tx_ht20"):
                    line = 1+testconfig.get_num_of_something("5G","tx_ht20_freq")*testconfig.get_num_of_something("5G","tx_ht20_rate")*testconfig.get_num_of_something("5G","tx_ht20_chain")
                    return line+num_2G
                elif(testwhat == "tx_ht40"):
                    line = 1+testconfig.get_num_of_something("5G","tx_ht20_freq")*testconfig.get_num_of_something("5G","tx_ht20_rate")*testconfig.get_num_of_something("5G","tx_ht20_chain")+\
                         testconfig.get_num_of_something("5G","tx_ht40_freq")*testconfig.get_num_of_something("5G","tx_ht40_rate")*testconfig.get_num_of_something("5G","tx_ht40_chain")
                    return line+num_2G
                elif(testwhat == "rx"):
                    line = 1+testconfig.get_num_of_something("5G","tx_ht20_freq")*testconfig.get_num_of_something("5G","tx_ht20_rate")*testconfig.get_num_of_something("5G","tx_ht20_chain")+\
                         testconfig.get_num_of_something("5G","tx_ht40_freq")*testconfig.get_num_of_something("5G","tx_ht40_rate")*testconfig.get_num_of_something("5G","tx_ht40_chain")+\
                         testconfig.get_num_of_something("5G","rx_freq")*testconfig.get_num_of_something("5G","rx_rate")*testconfig.get_num_of_something("5G","rx_chain")
                    return line+num_2G
            
    def protest(self):
        global tn
        global dll
        global freq_2g_ht20, rate_2g_ht20, chain
        global debug
        #global ht20_2g_setting, ht40_2g_setting, ht20_5g_setting, ht40_5g_setting
        global path_loss_2g, path_loss_5g
        myip = self.ip
        testconf = TestConf()
        
        power_limit_ht20_2G = string.atof(testconf.get_2G_power_limit_ht20())
        power_limit_ht40_2G = string.atof(testconf.get_2G_power_limit_ht40())
        power_limit_ht20_5G = string.atof(testconf.get_5G_power_limit_ht20())
        power_limit_ht40_5G = string.atof(testconf.get_5G_power_limit_ht40())
        
        #self.do_get_setting()
        try:
            if(test_mode == 5):
                tn = telnetlib.Telnet(myip,port=2391)
            elif(test_mode == 2):
                tn = telnetlib.Telnet(myip,port=2390)
        except Exception as e:
            self.printstr(u'抱歉，测试出错了！\n',QColor(255, 0, 0, 220))
            self.printstr(u"error({0}): {1}\n".format(e.errno, e.strerror),QColor(255, 0, 0, 220))
            return
        #载入set命令
        self.load_set_command()
        
        if(test_mode == 2):
            #热身
            self.printstr('\n\n###########  2G warmup  ###############\n',QColor(0, 0, 0, 110))
            self.warmup("2412")
            
            #校准
            self.loop_jiaozhun(["2412","2437","2462"],["1","2"])
        
            #校准完后
            self.after_jiaozhun()
            line = self.get_table_line_num("2G","jiaozhun")
            self.emit(SIGNAL("table_color"), line, "success")
            
            #time.sleep(1)
            self.loop_pinpian_jiaozhun()
            line = self.get_table_line_num("2G","pinpian_jiaozhun")
            self.emit(SIGNAL("table_color"), line, "success")
            
            self.telnet_exec_command(u"测试","hello","CONTROL DONE "+"hello", 1, 0, 1)
            s = '''
            self.printstr('\n\n###########  2G.TxPower.HT20  ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(freq_2g_ht20, rate_2g_ht20, chain, "power", ht20_2g_setting)
            self.printstr('\n\n###########  2G.TxPower.HT40  ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(freq_2g_ht40, rate_2g_ht40, chain, "power", ht40_2g_setting)
            self.printstr('\n\n###########  2G EVM 1  ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(freq_2g_ht20, ["54", "t7"], chain, "evm", ht20_2g_setting)
            self.printstr('\n\n###########  2G EVM 2  ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(freq_2g_ht40, ["f7"], chain, "evm", ht40_2g_setting)
            self.printstr('\n\n###########  2G Frequency Acuracy  ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(["2437"], ["54"], ["1"], "evm.ppm", no_setting)
            self.printstr('\n\n###########  2G SPECTRAL MASK   ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(["2437","2462"], ["1l","6","t0","f0"], ["1","2"], "special_mask", no_setting)
            self.printstr('\n\n###########  2G rx  ###############\n',QColor(0, 0, 0, 110))
            self.loop_rx(["2412","2437","2462"], ["5l","54","t7"], ["1","2"])
            '''
            self.printstr('\n\n###########  2G HT20  ###############\n',QColor(0, 0, 0, 110))
            tx_ht20_freq = testconf.get_something("2G","tx_ht20_freq").split(",")
            tx_ht20_rate = testconf.get_something("2G","tx_ht20_rate").split(",")
            tx_ht20_chain = testconf.get_something("2G","tx_ht20_chain").split(",")
            pre_line = self.get_table_line_num("2G","pinpian_jiaozhun")
            self.loop_tx(tx_ht20_freq, tx_ht20_rate, tx_ht20_chain, power_limit_ht20_2G,pre_line)
            self.printstr('\n\n###########  2G HT40  ###############\n',QColor(0, 0, 0, 110))
            tx_ht40_freq = testconf.get_something("2G","tx_ht40_freq").split(",")
            tx_ht40_rate = testconf.get_something("2G","tx_ht40_rate").split(",")
            tx_ht40_chain = testconf.get_something("2G","tx_ht40_chain").split(",")
            pre_line = self.get_table_line_num("2G","tx_ht20")
            self.loop_tx(tx_ht40_freq, tx_ht40_rate, tx_ht40_chain, power_limit_ht40_2G,pre_line)
            s='''
            self.printstr('\n\n###########  2G EVM 1  ###############\n',QColor(0, 0, 0, 110))
            tx_evm_ht20_freq = testconf.get_something("2G","tx_evm_ht20_freq").split(",")
            tx_evm_ht20_rate = testconf.get_something("2G","tx_evm_ht20_rate").split(",")
            tx_evm_ht20_chain = testconf.get_something("2G","tx_evm_ht20_chain").split(",")
            pre_line = self.get_table_line_num("2G","tx_power_ht40")
            self.loop_tx(tx_evm_ht20_freq, tx_evm_ht20_rate, tx_evm_ht20_chain, "evm", power_limit_ht20_2G, pre_line)
            self.printstr('\n\n###########  2G EVM 2  ###############\n',QColor(0, 0, 0, 110))
            tx_evm_ht40_freq = testconf.get_something("2G","tx_evm_ht40_freq").split(",")
            tx_evm_ht40_rate = testconf.get_something("2G","tx_evm_ht40_rate").split(",")
            tx_evm_ht40_chain = testconf.get_something("2G","tx_evm_ht40_chain").split(",")
            pre_line = self.get_table_line_num("2G","tx_evm_ht20")
            self.loop_tx(tx_evm_ht40_freq, tx_evm_ht40_rate, tx_evm_ht40_chain, "evm", power_limit_ht40_2G, pre_line)
            self.printstr('\n\n###########  2G Frequency Acuracy  ###############\n',QColor(0, 0, 0, 110))
            tx_evm_ppm_freq = testconf.get_something("2G","tx_evm_ppm_freq").split(",")
            tx_evm_ppm_rate = testconf.get_something("2G","tx_evm_ppm_rate").split(",")
            tx_evm_ppm_chain = testconf.get_something("2G","tx_evm_ppm_chain").split(",")
            pre_line = self.get_table_line_num("2G","tx_evm_ht40")
            self.loop_tx(tx_evm_ppm_freq, tx_evm_ppm_rate, tx_evm_ppm_chain, "evm.ppm", 0, pre_line)
            self.printstr('\n\n###########  2G SPECTRAL MASK   ###############\n',QColor(0, 0, 0, 110))
            tx_mask_freq = testconf.get_something("2G","tx_mask_freq").split(",")
            tx_mask_rate = testconf.get_something("2G","tx_mask_rate").split(",")
            tx_mask_chain = testconf.get_something("2G","tx_mask_chain").split(",")
            pre_line = self.get_table_line_num("2G","tx_evm_ppm")
            self.loop_tx(tx_mask_freq, tx_mask_rate, tx_mask_chain, "special_mask", 0, pre_line)
            '''
            self.printstr('\n\n###########  2G rx  ###############\n',QColor(0, 0, 0, 110))
            rx_freq = testconf.get_something("2G","rx_freq").split(",")
            rx_rate = testconf.get_something("2G","rx_rate").split(",")
            rx_chain = testconf.get_something("2G","rx_chain").split(",")
            pre_line = self.get_table_line_num("2G","tx_ht40")
            self.loop_rx(rx_freq, rx_rate, rx_chain, pre_line)
            
            #self.after_rx()
            
        elif(test_mode == 5):
            self.printstr('\n\n###########  5G warmup  ###############\n',QColor(0, 0, 0, 110))
            self.warmup("5180")
            
            self.loop_jiaozhun(["5180","5240","5260","5320","5500","5700","5745","5805"],["1","2"])
            #校准完后
            self.after_jiaozhun()
            line = self.get_table_line_num("5G","jiaozhun")
            self.emit(SIGNAL("table_color"), line, "success")
            
            self.loop_pinpian_jiaozhun()
            line = self.get_table_line_num("5G","pinpian_jiaozhun")
            self.emit(SIGNAL("table_color"), line, "success")
            
            self.telnet_exec_command(u"测试","hello","CONTROL DONE "+"hello", 1, 0, 1)
            s = '''
            self.printstr('\n\n###########  5GHz Power Accuracy 1 ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(freq_5g, ["6","t0","t7"], chain, "power", ht20_5g_setting)
            self.printstr('\n\n###########  5GHz Power Accuracy 2 ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(freq_5g, ["f0","f7"], chain, "power", ht40_5g_setting)
            self.printstr('\n\n###########  5GHz EVM 1  ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(freq_5g, ["54", "t7"], chain, "evm", ht20_5g_setting)
            self.printstr('\n\n###########  5GHz EVM 2  ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(freq_5g, ["f7"], chain, "evm", ht40_5g_setting)
            self.printstr('\n\n###########  5G Frequency Acuracy  ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(["5500"], ["54"], ["1"], "evm.ppm", no_setting)
            self.printstr('\n\n###########  5G SPECTRAL MASK 1  ###############\n',QColor(0, 0, 0, 110))
            self.loop_tx(["5500"], ["6","t0","f0"], ["1","2"], "special_mask", no_setting)
            
            self.printstr('\n\n###########  5G rx  ###############\n',QColor(0, 0, 0, 110))
            self.loop_rx(["5180","5500","5805"], ["6","54"], ["1","2"])
            '''
            self.printstr('\n\n###########  5GHz ht20 ###############\n',QColor(0, 0, 0, 110))
            tx_ht20_freq = testconf.get_something("5G","tx_ht20_freq").split(",")
            tx_ht20_rate = testconf.get_something("5G","tx_ht20_rate").split(",")
            tx_ht20_chain = testconf.get_something("5G","tx_ht20_chain").split(",")
            pre_line = self.get_table_line_num("5G","pinpian_jiaozhun")
            self.loop_tx(tx_ht20_freq, tx_ht20_rate, tx_ht20_chain, power_limit_ht20_5G,pre_line)
            self.printstr('\n\n###########  5GHz ht40 ###############\n',QColor(0, 0, 0, 110))
            tx_ht40_freq = testconf.get_something("5G","tx_ht40_freq").split(",")
            tx_ht40_rate = testconf.get_something("5G","tx_ht40_rate").split(",")
            tx_ht40_chain = testconf.get_something("5G","tx_ht40_chain").split(",")
            pre_line = self.get_table_line_num("5G","tx_ht20")
            self.loop_tx(tx_ht40_freq, tx_ht40_rate, tx_ht40_chain, power_limit_ht40_5G,pre_line)
            s='''
            self.printstr('\n\n###########  5GHz EVM 1  ###############\n',QColor(0, 0, 0, 110))
            tx_evm_ht20_freq = testconf.get_something("5G","tx_evm_ht20_freq").split(",")
            tx_evm_ht20_rate = testconf.get_something("5G","tx_evm_ht20_rate").split(",")
            tx_evm_ht20_chain = testconf.get_something("5G","tx_evm_ht20_chain").split(",")
            pre_line = self.get_table_line_num("5G","tx_power_ht40")
            self.loop_tx(tx_evm_ht20_freq, tx_evm_ht20_rate, tx_evm_ht20_chain, "evm", power_limit_ht20_5G,pre_line)
            self.printstr('\n\n###########  5GHz EVM 2  ###############\n',QColor(0, 0, 0, 110))
            tx_evm_ht40_freq = testconf.get_something("5G","tx_evm_ht40_freq").split(",")
            tx_evm_ht40_rate = testconf.get_something("5G","tx_evm_ht40_rate").split(",")
            tx_evm_ht40_chain = testconf.get_something("5G","tx_evm_ht40_chain").split(",")
            pre_line = self.get_table_line_num("5G","tx_evm_ht20")
            self.loop_tx(tx_evm_ht40_freq, tx_evm_ht40_rate, tx_evm_ht40_chain, "evm", power_limit_ht40_5G,pre_line)
            self.printstr('\n\n###########  5G Frequency Acuracy  ###############\n',QColor(0, 0, 0, 110))
            tx_evm_ppm_freq = testconf.get_something("5G","tx_evm_ppm_freq").split(",")
            tx_evm_ppm_rate = testconf.get_something("5G","tx_evm_ppm_rate").split(",")
            tx_evm_ppm_chain = testconf.get_something("5G","tx_evm_ppm_chain").split(",")
            pre_line = self.get_table_line_num("5G","tx_evm_ht40")
            self.loop_tx(tx_evm_ppm_freq, tx_evm_ppm_rate, tx_evm_ppm_chain, "evm.ppm", 0,pre_line)
            self.printstr('\n\n###########  5G SPECTRAL MASK 1  ###############\n',QColor(0, 0, 0, 110))
            tx_mask_freq = testconf.get_something("5G","tx_mask_freq").split(",")
            tx_mask_rate = testconf.get_something("5G","tx_mask_rate").split(",")
            tx_mask_chain = testconf.get_something("5G","tx_mask_chain").split(",")
            pre_line = self.get_table_line_num("5G","tx_evm_ppm")
            self.loop_tx(tx_mask_freq, tx_mask_rate, tx_mask_chain, "special_mask", 0,pre_line)
            '''
            self.printstr('\n\n###########  5G rx  ###############\n',QColor(0, 0, 0, 110))
            rx_freq = testconf.get_something("5G","rx_freq").split(",")
            rx_rate = testconf.get_something("5G","rx_rate").split(",")
            rx_chain = testconf.get_something("5G","rx_chain").split(",")
            pre_line = self.get_table_line_num("5G","tx_ht40")
            self.loop_rx(rx_freq, rx_rate, rx_chain,pre_line)
            #self.after_rx()
    
    def telnet_exec_command(self, name, cmd, finish, print_a, start, read_s = 1):
        s = ''
        try:
            tn.write(cmd+"\n")
            if(start != 0):
                tn.write("START\n")
        except Exception as e:
            self.printstr(name.ljust(40+len(name)-total_width(name)),QColor(0, 0, 0, 235))
            self.printstr('[ERR]\n',QColor(255, 0, 0, 220))
            self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
            self.printstr(u"error: {0}\n\n".format(e),QColor(255, 0, 0, 220))
            return
        if(read_s != 0):
            s = tn.read_until(finish)
        if(print_a != 0):
            self.printstr(name.ljust(40+len(name)-total_width(name)),QColor(0, 0, 0, 235))
            self.printstr('[OK]\n',QColor(0, 255, 0, 220))
            self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
            if(read_s != 0):
                self.printstr(s+'\n', QColor(139, 101, 8, 255))
        return s
    
    def telnet_exec_command_t(self, name, cmd, finish, print_a, start, read_s = 1, t=0):
        s = ''
        try:
            tn.write(cmd+"\n")
            if(start != 0):
                if(time != 0):
                    time.sleep(t)
                tn.write("START\n")
        except Exception as e:
            self.printstr(name.ljust(40+len(name)-total_width(name)),QColor(0, 0, 0, 235))
            self.printstr('[ERR]\n',QColor(255, 0, 0, 220))
            self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
            self.printstr(u"error: {0}\n\n".format(e),QColor(255, 0, 0, 220))
            return
        if(read_s != 0):
            s = tn.read_until(finish)
        if(print_a != 0):
            self.printstr(name.ljust(40+len(name)-total_width(name)),QColor(0, 0, 0, 235))
            self.printstr('[OK]\n',QColor(0, 255, 0, 220))
            self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
            if(read_s != 0):
                self.printstr(s+'\n', QColor(139, 101, 8, 255))
        return s

    def telnet_exec_command_start_3(self, name, cmd, finish):
        global dll
        try:
            tn.write(cmd+"\n")
            #dll = cdll.LoadLibrary('IQmeasure.dll');  
            ret = dll.LP_SetFrameCnt(c_int(5))
            self.printstr(str(ret)+'\n',QColor(0, 0, 0, 110))
            while(dll.LP_TxDone()):
                continue
            tn.write("START\n")
        except Exception as e:
            self.printstr(name.ljust(40+len(name)-total_width(name)),QColor(0, 0, 0, 235))
            self.printstr('[ERR]\n',QColor(255, 0, 0, 220))
            self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
            self.printstr(u"error: {0}\n\n".format(e),QColor(255, 0, 0, 220))
            return
        self.printstr(name.ljust(40+len(name)-total_width(name)),QColor(0, 0, 0, 235))
        self.printstr('[OK]\n',QColor(0, 255, 0, 220))
        self.printstr(cmd+'\n',QColor(0, 0, 0, 110))

    def telnet_exec_stop(self, finish, print_a = 1):
        try:
            tn.write("STOP\n")
        except Exception as e:
            self.printstr('[ERR]\n',QColor(255, 0, 0, 220))
            return
        s = tn.read_until(finish)
        if(print_a != 0):
            self.printstr(s+'\n', QColor(139, 101, 8, 255))
        return s
    
    def telnet_exec_command_start_noread(self, name, cmd, finish):
        try:
            tn.write(cmd+"\n")
            tn.write("START\n")
        except Exception as e:
            self.printstr(name.ljust(40+len(name)-total_width(name)),QColor(0, 0, 0, 235))
            self.printstr('[ERR]\n',QColor(255, 0, 0, 220))
            self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
            self.printstr(u"error: {0}\n\n".format(e),QColor(255, 0, 0, 220))
            return
        self.printstr(name.ljust(40+len(name)-total_width(name)),QColor(0, 0, 0, 235))
        self.printstr('[OK]\n',QColor(0, 255, 0, 220))
        self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
    
    def load_set_command(self):
        if(test_mode == 2):
            self.printstr('\n\n###########  Loading 2G setting  ###############\n',QColor(0, 0, 0, 110))
            f = open("test_cmd_2g.txt")
        elif(test_mode == 5):
            self.printstr('\n\n###########  Loading 5G setting  ###############\n',QColor(0, 0, 0, 110))
            f = open("test_cmd_5g.txt")
        line = f.readline()
        while line:
            line = f.readline()
            if(len(line) == 1 or len(line) == 0):continue
            cmd = line.replace("\n","")
            self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 0, 0, 1)
    
    def load_set_command_all(self):
        f = open("test_cmd_2g.txt")
        line = f.readline()
        while line:
            line = f.readline()
            if(len(line) == 1 or len(line) == 0):continue
            cmd = line.replace("\n","")
            self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 0, 0, 1)
        f.close()
        f = open("test_cmd_5g.txt")
        line = f.readline()
        while line:
            line = f.readline()
            if(len(line) == 1 or len(line) == 0):continue
            cmd = line.replace("\n","")
            self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 0, 0, 1)
        f.close()
    
    def t_geterr(self, errcode):
        dll = cdll.LoadLibrary('IQmeasure.dll');  
        pcName = c_char_p('/0'*200)
        pcName = dll.LP_GetErrorString(errcode)
        err = string_at(pcName,200)
        self.printstr(err,QColor(255, 0, 0, 220))
        self.printstr("\n",QColor(255, 0, 0, 220))
        
    def test_wanip_del(self):
        self.ssh2_exec_command(u"恢复wan口配置：","protest --wanip -del")
        self.ssh2_exec_command_poor('''sed -n "/config interface 'wan'/{p;:a;n;/config/q;p;ba;}" /etc/config/network''');
        self.emit(SIGNAL("table_color"), 20, "success")
    
    def test_restore(self):
        self.ssh2_exec_command(u"执行恢复出厂默认配置操作：","protest --restore")
    
    def dll_init(self):
        global dll
        dll = cdll.LoadLibrary('IQmeasure.dll');  
        ret = dll.LP_Init(c_int(1),c_int(0));
        if(debug != 0):
            self.printstr("LP_Init:"+str(ret)+'\n',QColor(0, 0, 0, 110))
        ret = dll.LP_InitTester("192.168.100.254", c_int(0));
        if(debug != 0):
            self.printstr("LP_InitTester:"+str(ret)+'\n',QColor(0, 0, 0, 110))
    
    def mask_dll_init(self):
        global mask_dll
        mask_dll = cdll.LoadLibrary('MaskDll.DLL');  
    
    def dll_getversion(self):
        global dll
        strMa = "/0"*200  
        FunPrint  = dll.LP_GetVersion  
        FunPrint.argtypes = [c_char_p, c_int]  
        nRst = FunPrint(strMa, len(strMa))  
        self.printstr(strMa+'\n',QColor(0, 0, 0, 110))
    
    def dll_setvsa(self, rfFreqHz, rfAmplDb, port, extAttenDb = 0, triggerLevelDb = -25, triggerPreTime = 10e-6, dFreqShiftHz = 0.0, dTriggerGapTime = 6e-6):
        ret = dll.LP_SetVsa(c_double(rfFreqHz*1e6), c_double(rfAmplDb), c_int(port), c_double(extAttenDb), c_double(triggerLevelDb), c_double(triggerPreTime), c_double(dFreqShiftHz), c_double(dTriggerGapTime));
        self.printstr("ret:"+str(ret)+'\n',QColor(0, 0, 0, 110))
        if(ret != 0):
            self.t_geterr(ret)
    
    def str_find_tp(self, ttp_str):
        s = ttp_str.split("||")
        return s[3]
    
    def create_command_tx(self, freq, rate, chain, tp):
        s = '''
        if(test == "power"):
            cmd_tx = "tx f="+freq+";ir=0;gi=0;txch="+chain+";rxch=7;pc=1000000;pl=4000;bc=1;retry=0;att=0;iss=0;stat=3;ifs=1;dur=600000;dump=0;pro=0;bssid=50.55.55.55.55.05;mactx=20.22.22.22.22.02;macrx=10.11.11.11.11.01;deaf=0;reset=-1;agg=1;duc=99;ht40=2;r="+rate+";tp="+tp+";"
        elif(test == "evm.ppm" and string.atoi(freq)>5000):
            cmd_tx = "tx f="+freq+";ir=0;gi=0;txch="+chain+";rxch=7;pc=1000000;pl=1500;bc=1;retry=0;att=0;iss=0;stat=3;ifs=1;dur=600000;dump=0;pro=0;bssid=50.55.55.55.55.05;mactx=20.22.22.22.22.02;macrx=10.11.11.11.11.01;deaf=0;reset=-1;agg=1;ht40=2;r="+rate+";tp="+tp+";"
        else:
            cmd_tx = "tx f="+freq+";ir=0;gi=0;txch="+chain+";rxch=7;pc=1000000;pl=4000;bc=1;retry=0;att=0;iss=0;stat=3;ifs=1;dur=600000;dump=0;pro=0;bssid=50.55.55.55.55.05;mactx=20.22.22.22.22.02;macrx=10.11.11.11.11.01;deaf=0;reset=-1;agg=1;ht40=2;r="+rate+";tp="+tp+";"
        '''
        cmd_tx = "tx f="+freq+";ir=0;gi=0;txch="+chain+";rxch=7;pc=1000000;pl=4000;bc=1;retry=0;att=0;iss=0;stat=3;ifs=1;dur=600000;dump=0;pro=0;bssid=50.55.55.55.55.05;mactx=20.22.22.22.22.02;macrx=10.11.11.11.11.01;deaf=0;reset=-1;agg=1;ht40=2;r="+rate+";tp="+tp+";"
        return cmd_tx
    
    def get_lost(self, freq):
        testconf = TestConf()
        lost_str = ""
        if(string.atoi(freq)<5000):
            index = testconf.get_2G_freq_for_lost().split(",").index(freq)
            lost_str = testconf.get_2G_lost_for_freq().split(",")[index]
            lost = string.atof(lost_str)
            return lost
        else:
            index = testconf.get_5G_freq_for_lost().split(",").index(freq)
            lost_str = testconf.get_5G_lost_for_freq().split(",")[index]
            lost = string.atof(lost_str)
            return lost
    
    def get_powerlevel(self, freq, rate):
        testconf = TestConf()
        lost_str = ""
        if(string.atoi(freq)<5000):
            #index = testconf.get_2G_rate_for_powerlevel().split(",").index(rate)
            #level_str = testconf.get_2G_powerlevel_for_rate().split(",")[index]
            index = testconf.get_something("2G","rate_for_powerlevel").split(",").index(rate)
            level_str = testconf.get_something("2G","powerlevel_for_rate").split(",")[index]
            level = string.atof(level_str)
            return level
        else:
            index = testconf.get_something("5G","rate_for_powerlevel").split(",").index(rate)
            level_str = testconf.get_something("5G","powerlevel_for_rate").split(",")[index]
            level = string.atof(level_str)
            return level
    
    def loop_tx(self, freq_all, rate_all, chain_all, setting_limit, pre_line=None):
        global capture_time
        global tx_evm_limit
        global test_result_fail
        #global txppm_limit
        global dll
        global mask_dll
        result = 0
        sp_line = pre_line
        for freq in freq_all:
            for chain in chain_all:
                for rate in rate_all:
                    testconf = TestConf()
                    result = 0
                    
                    if(string.atoi(freq)<5000):
                        txppm_limit = testconf.get_2G_ppm_limit()
                    else:
                        txppm_limit = testconf.get_5G_ppm_limit()
                    if(sp_line!=None):
                        sp_line = sp_line+1
                    self.printstr("++++++++++++++No:"+str(sp_line+1)+'+++++++++++++++++++++++\n',QColor(0, 50, 110, 110))
                    index_str = freq+"_"+rate+"_"+chain
                    if(debug != 0):
                        self.printstr("freq:"+freq+",rate:"+rate+","+"chain:"+chain+'\n',QColor(0, 0, 0, 110))
                    
                    cmd_gettp = "gettp f="+freq+"; r="+rate+";"
                    ttpstr = self.telnet_exec_command(u"测试",cmd_gettp,"CONTROL DONE "+cmd_gettp, 1, 0, 1)
                    self.printstr("ttpstr:"+ttpstr+'\n',QColor(0, 0, 0, 110))
                    tp = self.str_find_tp(ttpstr)
                    self.printstr("tp:"+tp+'\n',QColor(0, 0, 0, 110))
                    cmd = self.create_command_tx(freq, rate, chain, tp)
                    if(debug != 0):
                        self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
                    self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 1, 1, 0)
                    if(rate == "f0" or rate == "f7"):
                        self.dll_setvsa(string.atoi(freq)+10, 10, 2)
                    else:
                        self.dll_setvsa(string.atoi(freq), 10, 2)
                    
                    time.sleep(0.5)
                    r = rate.lower()
                    time_var = capture_time[r]
                    if(debug != 0):
                        self.printstr("capture time::"+str(time_var)+'\n',QColor(0, 0, 0, 110))
                    ret = dll.LP_VsaDataCapture(c_double(time_var*1e-6), c_int(6), c_double(160e6), c_int(0), c_int(0))
                    if(debug != 0):
                        self.printstr("LP_VsaDataCapture:"+str(ret)+'\n',QColor(0, 0, 0, 110))
                    if(ret != 0):
                        self.t_geterr(ret)
                    
                    d_type = self.rate_to_type(rate)
                    #time.sleep(200)
                    mask_dll.LP_AnalyzeMASK.restype = c_double
                    #if(test == "special_mask"):
                    if(d_type == "80211n"):
                        if(rate[0]=="f"):
                            self.printstr('IQ_MODE_11N_40\n',QColor(0, 0, 0, 110))
                            mymask = mask_dll.LP_AnalyzeMASK(c_int(4))
                            self.printstr('mask = '+str(mymask)+'\n',QColor(0, 0, 0, 110))
                            if(mymask == 0.0):
                                special_mask_result = 0
                            else:
                                special_mask_result = 1
                        else:
                            self.printstr('IQ_MODE_11N_20\n',QColor(0, 0, 0, 110))
                            mymask = mask_dll.LP_AnalyzeMASK(c_int(3))
                            self.printstr('mask = '+str(mymask)+'\n',QColor(0, 0, 0, 110))
                            if(mymask == 0.0):
                                special_mask_result = 0
                            else:
                                special_mask_result = 1
                    elif(d_type == "80211b"):
                        self.printstr('IQ_MODE_11B\n',QColor(0, 0, 0, 110))
                        mymask = mask_dll.LP_AnalyzeMASK(c_int(0))
                        self.printstr('mask = '+str(mymask)+'\n',QColor(0, 0, 0, 110))
                        if(mymask == 0.0):
                            special_mask_result = 0
                        else:
                            special_mask_result = 1
                    elif(d_type == "80211ag"):
                        if(string.atoi(freq)<5000):
                            self.printstr('IQ_MODE_11G\n',QColor(0, 0, 0, 110))
                            mymask = mask_dll.LP_AnalyzeMASK(c_int(1))
                            self.printstr('mask = '+str(mymask)+'\n',QColor(0, 0, 0, 110))
                            if(mymask == 0.0):
                                special_mask_result = 0
                            else:
                                special_mask_result = 1
                        else:
                            self.printstr('IQ_MODE_11A\n',QColor(0, 0, 0, 110))
                            mymask = mask_dll.LP_AnalyzeMASK(c_int(2))
                            self.printstr('mask = '+str(mymask)+'\n',QColor(0, 0, 0, 110))
                            if(mymask == 0.0):
                                special_mask_result = 0
                            else:
                                special_mask_result = 1
                    
                    if(d_type == "80211b"):
                        ret = dll.LP_Analyze80211b(c_int(1), c_int(0), c_int(1), c_double(8.8e-6), c_double(15.2e-6))
                        if(debug != 0):
                            self.printstr("LP_Analyze80211b:"+str(ret)+'\n',QColor(0, 0, 0, 110))
                        if(ret != 0):
                            self.t_geterr(ret)
                    elif(d_type == "80211ag"):
                        #ret = dll.LP_Analyze80211ag(c_int(2), c_int(1), c_int(2), c_int(2), c_int(1), c_double(8.8e-6), c_double(15.2e-6))
                        ret = dll.LP_Analyze80211ag(c_int(2), c_int(3), c_int(2), c_int(2), c_int(1), c_double(8.8e-6), c_double(15.2e-6))
                        if(debug != 0):
                            self.printstr("LP_Analyze80211ag:"+str(ret)+'\n',QColor(0, 0, 0, 110))
                        if(ret != 0):
                            self.t_geterr(ret)
                    else:
                        #ret = dll.LP_Analyze80211n("EWC", "nxn", c_int(1), c_int(1), c_int(0), c_int(1), c_int(0), "", c_int(0), c_int(2), c_double(8.8e-6), c_double(15.2e-6))
                        ret = dll.LP_Analyze80211n("EWC", "nxn", c_int(1), c_int(1), c_int(0), c_int(1), c_int(1), "", c_int(0), c_int(2), c_double(8.8e-6), c_double(15.2e-6))
                        if(debug != 0):
                            self.printstr("LP_Analyze80211n:"+str(ret)+'\n',QColor(0, 0, 0, 110))
                        if(ret != 0):
                            self.t_geterr(ret)
                    
                    dll.LP_GetScalarMeasurement.restype = c_double
                    
                    evmAvgAll_0 = dll.LP_GetScalarMeasurement("evmAvgAll", c_int(0))
                    evmAll_0 = dll.LP_GetScalarMeasurement("evmAll", c_int(0))
                    rmsPower_0 = dll.LP_GetScalarMeasurement("rmsPower", c_int(0));
                    pkPower_0 = dll.LP_GetScalarMeasurement("pkPower", c_int(0));
                    freqErrorHz_0 = dll.LP_GetScalarMeasurement("freqErrorHz", c_int(0));
                    freqErr_0 = dll.LP_GetScalarMeasurement("freqErr", c_int(0));
                    clockErr_0 = dll.LP_GetScalarMeasurement("clockErr", c_int(0));
                    symClockErrorPpm_0 = dll.LP_GetScalarMeasurement("symClockErrorPpm", c_int(0));
                    rxRmsPowerDb_4 = dll.LP_GetScalarMeasurement("rxRmsPowerDb", c_int(0));
                    
                    P_av_no_gap_all_dBm = self.get_power_2(rate)
                    valid_3 = self.get_power_param("valid")
                    P_av_each_burst_3 = self.get_power_param("P_av_each_burst")
                    P_pk_each_burst_3 = self.get_power_param("P_pk_each_burst")
                    P_av_all_3 = self.get_power_param("P_av_all")
                    P_peak_all_3 = self.get_power_param("P_peak_all")
                    P_av_no_gap_all_3 = self.get_power_param("P_av_no_gap_all")
                    P_av_all_dBm_3 = self.get_power_param("P_av_all_dBm")
                    P_peak_all_dBm_3 = self.get_power_param("P_peak_all_dBm")
                    
                    rmsMaxAvgPower_0 = dll.LP_GetScalarMeasurement("rmsMaxAvgPower", c_int(0));
                    rxRmsPowerDb_0 = dll.LP_GetScalarMeasurement("rxRmsPowerDb", c_int(0));
                    rmsMaxAvgPower = dll.LP_GetScalarMeasurement("rmsMaxAvgPower", c_int(1));
                    rxRmsPowerDb = dll.LP_GetScalarMeasurement("rxRmsPowerDb", c_int(1));
                    s = '''
                    if(debug != 0):
                        self.printstr("rmsPower_0:"+str(rmsPower_0)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("pkPower_0:"+str(pkPower_0)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("rmsMaxAvgPower_0:"+str(rmsMaxAvgPower_0)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("rxRmsPowerDb_0:"+str(rxRmsPowerDb_0)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("P_av_no_gap_all_dBm:"+str(P_av_no_gap_all_dBm)+'\n',QColor(0, 0, 0, 110))
                        
                        self.printstr("rxRmsPowerDb_4:"+str(rxRmsPowerDb_4)+'\n',QColor(0, 0, 0, 110)) #相当于rmsPowerNoGap
                        self.printstr("valid_3:"+str(valid_3)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("P_av_each_burst_3:"+str(P_av_each_burst_3)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("P_pk_each_burst_3:"+str(P_pk_each_burst_3)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("P_av_all_3:"+str(P_av_all_3)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("P_peak_all_3:"+str(P_peak_all_3)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("P_av_no_gap_all_3:"+str(P_av_no_gap_all_3)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("P_av_all_dBm_3:"+str(P_av_all_dBm_3)+'\n',QColor(0, 0, 0, 110))
                        self.printstr("P_peak_all_dBm_3:"+str(P_peak_all_dBm_3)+'\n',QColor(0, 0, 0, 110))
                        
                        if(d_type == "80211n"):
                            self.printstr("evmAvgAll_0:"+str(evmAvgAll_0)+'\n',QColor(0, 0, 0, 110))
                            self.printstr("freqErrorHz_0:"+str(freqErrorHz_0)+'\n',QColor(0, 0, 0, 110))
                            self.printstr("symClockErrorPpm_0:"+str(symClockErrorPpm_0)+'\n',QColor(0, 0, 0, 110))
                        else:
                            self.printstr("evmAll_0:"+str(evmAll_0)+'\n',QColor(0, 0, 0, 110))
                            self.printstr("freqErr_0:"+str(freqErr_0)+'\n',QColor(0, 0, 0, 110))
                            self.printstr("clockErr_0:"+str(clockErr_0)+'\n',QColor(0, 0, 0, 110))
                    '''
                    self.telnet_exec_stop("CONTROL DONE "+cmd)
                    
                    #(lost, limit) = setting
                    limit = setting_limit
                    lost = self.get_lost(freq)
                    mylost = self.get_lost(freq)
                    s = '''
                    self.printstr("mylost:"+str(mylost)+'\n',QColor(0, 0, 0, 110))
                    self.printstr("lost:"+str(lost)+',limit:'+str(limit)+'\n',QColor(0, 0, 0, 110))
                    '''
                    #if(test == "power"):
                    meas_pwr = lost + P_av_no_gap_all_dBm
                    self.printstr("meas_pwr:"+str(meas_pwr)+'\n',QColor(0, 0, 0, 110))
                    target = string.atof(tp)
                    delta = meas_pwr - target
                    self.printstr("delta:"+str(delta)+'\n',QColor(0, 0, 0, 110))
                    if(abs(delta) <= limit):
                        self.printstr('power PASS\n',QColor(0, 255, 0, 220))
                        power_result = 0
                    else:
                        self.printstr('power NOT PASS\n',QColor(255, 0, 0, 220))
                        power_result = 1
                    #elif(test == "evm"):
                    stand_evm = tx_evm_limit[rate]
                    self.printstr("stand_evm:"+str(stand_evm)+'\n',QColor(0, 0, 0, 110))
                    if(d_type == "80211n"):
                        if(evmAvgAll_0 > stand_evm):
                            self.printstr('evm NOT PASS\n',QColor(255, 0, 0, 220))
                            evm_result = 1
                        else:
                            self.printstr('evm PASS\n',QColor(0, 255, 0, 220))
                            evm_result = 0
                    else:
                        if(evmAll_0 > stand_evm):
                            self.printstr('evm NOT PASS\n',QColor(255, 0, 0, 220))
                            evm_result = 1
                        else:
                            self.printstr('evm PASS\n',QColor(0, 255, 0, 220))
                            evm_result = 0
                    #elif(test == "evm.ppm"):
                    if(d_type == "80211n"):
                        if(abs(symClockErrorPpm_0) > txppm_limit):
                            self.printstr('evm_ppm NOT PASS\n',QColor(255, 0, 0, 220))
                            evm_ppm_result = 1
                        else:
                            self.printstr('evm_ppm PASS\n',QColor(0, 255, 0, 220))
                            evm_ppm_result = 0
                    else:
                        if(abs(clockErr_0) > txppm_limit):
                            self.printstr('evm_ppm NOT PASS\n',QColor(255, 0, 0, 220))
                            evm_ppm_result = 1
                        else:
                            self.printstr('evm_ppm PASS\n',QColor(0, 255, 0, 220))
                            evm_ppm_result = 0
                    
                    if(sp_line!= None):
                        if(special_mask_result == 0 and power_result == 0 and evm_result == 0 and evm_ppm_result == 0):
                            self.emit(SIGNAL("table_color"), sp_line, "success")
                        else:
                            self.emit(SIGNAL("table_color"), sp_line, "fail")
                            test_result_fail = 1
                        self.printstr('\n',QColor(0, 0, 0, 110))
    
    def rate_to_type(self, rate):
        global rate_80211b,rate_80211g,rate_80211a,rate_80211n_ht20,rate_80211n_ht40
        r = rate.lower()
        if(rate_80211b.count(r)!=0):
            return "80211b"
        elif(rate_80211a.count(r)!=0 or rate_80211g.count(r)!=0):
            return "80211ag"
        elif(rate_80211n_ht20.count(r)!=0 or rate_80211n_ht40.count(r)!=0):
            return "80211n"
        else:
            return "unknown"
    
    def create_command_rx_5g(self, freq, rate, chain, stat):
        r = rate.lower()
        iss = self.get_rx_command_iss(rate)
        cmd_rx = "rx f="+freq+";ir=0;gi=0;txch=1;rxch="+chain+";pc=100;pl=1000;bc=1;retry=0;att=0;iss="+iss+";stat="+stat+";ifs=-1;dur=600000;dump=0;pro=0;bssid=01.00.00.c0.ff.ee;mactx=01.00.00.c0.ff.ee;macrx=01.00.00.c0.ff.ee;deaf=0;reset=-1;agg=1;ht40=2;r="+rate+";tp=8.0;"
        return cmd_rx
    
    def loop_rx(self, freq_all, rate_all, chain_all, pre_line=None):
        global dll
        global test_result_fail
        #global vsg_power_level
        global path_loss_2g
        global path_loss_5g
        sp_line = pre_line
        for freq in freq_all:
            for rate in rate_all:
                for chain in chain_all:
                    if(debug != 0):
                        self.printstr("freq:"+freq+",rate:"+rate+","+"chain:"+chain+'\n',QColor(0, 0, 0, 110))
                    if(sp_line!=None):
                        sp_line=sp_line+1
                    self.printstr("++++++++++++++No:"+str(sp_line+1)+'+++++++++++++++++++++++\n',QColor(0, 50, 110, 110))
                    r = rate.lower()
                    #power_level = vsg_power_level[r]
                    power_level = self.get_powerlevel(freq, r)
                    print power_level
                    power_level = power_level + self.get_lost(freq)
                    print power_level
                    s = '''
                    if(string.atoi(freq)<5000):
                        power_level = power_level + self.get_lost
                    else:
                        power_level = power_level + path_loss_5g
                    '''
                    if(debug != 0):
                        self.printstr("power_level:"+str(power_level)+'\n',QColor(0, 0, 0, 110))
                    self.printstr("LP_SetVsg freq:"+str(string.atoi(freq)*1e6)+'\n',QColor(0, 0, 0, 110))
                    ret = dll.LP_SetVsg(c_double(string.atoi(freq)*1e6), c_double(power_level), c_int(2))
                    if(debug != 0):
                        self.printstr("LP_SetVsg:"+str(ret)+'\n',QColor(0, 0, 0, 110))
                    filename = self.rx_rate_to_file(rate)
                    ret = dll.LP_SetVsgModulation(filename, c_int(0))
                    if(debug != 0):
                        self.printstr("LP_SetVsgModulation:"+str(ret)+'\n',QColor(0, 0, 0, 110))
                    if(debug != 0):
                        self.printstr("filename:"+filename+'\n',QColor(0, 0, 0, 110))
                    self.rx_exec_cmd(freq, rate, chain, "0", 5, 0.3, 1, 1)
                    return_s = self.rx_exec_cmd(freq, rate, chain, "1", 100, 0.5, 1, 1)
                    print("freq:"+freq+",rate:"+rate+","+"chain:"+chain+'\n')
                    correct = return_s.split("||")[2].split("|")[0]
                    print "correct",return_s.split("||")[2].split("|")[0]
                    self.printstr('\n\n',QColor(0, 0, 0, 110))
                    
                    d_type = self.rate_to_type(rate)
                    if(d_type == "80211b"):
                        if(string.atoi(correct)>=92):
                            result = 0
                        else:
                            result = 1
                    else:
                        if(string.atoi(correct)>=90):
                            result = 0
                        else:
                            result = 1
                    if(sp_line!=None):
                        if(result == 0):
                            self.emit(SIGNAL("table_color"), sp_line, "success")
                        else:
                            self.emit(SIGNAL("table_color"), sp_line, "fail")
                            test_result_fail = 1
    
    def loop_loop_rx(self, freq, rate, chain):
        global dll

        i = 10
        while(i>0):
            i = i-1
            if(debug != 0):
                self.printstr("freq:"+freq+",rate:"+rate+","+"chain:"+chain+'\n',QColor(0, 0, 0, 110))

            self.printstr("LP_SetVsg freq:"+str(string.atoi(freq)*1e6)+'\n',QColor(0, 0, 0, 110))
            ret = dll.LP_SetVsg(c_double(string.atoi(freq)*1e6), c_double(-30), c_int(2))
            if(debug != 0):
                self.printstr("LP_SetVsg:"+str(ret)+'\n',QColor(0, 0, 0, 110))
            filename = self.rx_rate_to_file(rate)
        
            ret = dll.LP_SetVsgModulation(filename, c_int(0))
            
            ret = dll.LP_SetFrameCnt(c_int(100))
            if(debug != 0):
                self.printstr("LP_SetFrameCnt:"+str(ret)+'\n',QColor(0, 0, 0, 110))
            while(dll.LP_TxDone()):
                continue
                
            if(debug != 0):
                self.printstr("LP_SetVsgModulation:"+str(ret)+'\n',QColor(0, 0, 0, 110))
            if(debug != 0):
                self.printstr("filename:"+filename+'\n',QColor(0, 0, 0, 110))

            self.rx_exec_cmd(freq, rate, chain, "3", 100, 0.5, 1, 1)
            self.printstr('\n\n',QColor(0, 0, 0, 110))
    
    def rx_exec_cmd(self, freq, rate, chain, stat, cnt, t, read_s, send_pk):
        global dll
        cmd = self.create_command_rx_5g(freq, rate, chain, stat)
        if(debug != 0):
            self.printstr("rx cmd:"+cmd+'\n',QColor(0, 0, 0, 110))
        self.telnet_exec_command_t(u"测试",cmd,"CONTROL OK", 1, 1, read_s, t)
        if(send_pk != 0):
            ret = dll.LP_SetFrameCnt(c_int(cnt))
            if(debug != 0):
                self.printstr("LP_SetFrameCnt:"+str(ret)+'\n',QColor(0, 0, 0, 110))
            while(dll.LP_TxDone()):
                continue
        return self.telnet_exec_stop("CONTROL DONE "+cmd)

    def rx_rate_to_file(self, rate):
        global rate_80211b,rate_80211g,rate_80211a,rate_80211n_ht20,rate_80211n_ht40
        rate_ = rate
        if(rate_ == "5l" or rate_ == "5L"):
            rate_ = "5.5l"
        elif(rate_ == "5s" or rate_ == "5S"):
            rate_ = "5.5s"
        r = rate_.lower()
        R = rate_.upper().replace(".","_")
        file = ""
        if(rate_80211b.count(r)!=0):
            file = "WiFi_CCK-"+R+".iqvsg"
        elif(rate_80211a.count(r)!=0 or rate_80211g.count(r)!=0):
            file = "WiFi_OFDM-"+R+".iqvsg"
        elif(rate_80211n_ht20.count(r)!=0):
            n = filter(str.isdigit, rate)
            file = "WiFi_HT20_MCS"+n+".iqvsg"
        elif(rate_80211n_ht40.count(r)!=0):
            n = filter(str.isdigit, rate)
            file = "WiFi_HT40_MCS"+n+".iqvsg"
        return file
    
    def warmup(self, freq):
        testconf = TestConf()
        if(string.atoi(freq)<5000):
            pcdac=testconf.get_2G_pcdac()
        else:
            pcdac=testconf.get_5G_pcdac()
        print "pcdac",pcdac,"freq",freq
        cmd = "tx f="+freq+";ir=0;gi=0;txch=3;rxch=3;pc=5000;pl=1000;bc=1;retry=0;att=0;iss=0;stat=3;ifs=-1;dur=600000;dump=0;pro=0;bssid=50.55.55.55.55.05;mactx=20.22.22.22.22.02;macrx=10.11.11.11.11.01;deaf=0;reset=-1;agg=1;ht40=2;r=t0;pcdac="+pcdac+";pdgain=3;"
        self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 1, 1, 1)
        cmd = "sw a=BB_heavy_clip_1.heavy_clip_enable; v=0;"
        self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 1, 0, 1)
    
    def after_jiaozhun(self):
        cmd = "sc a=BB_heavy_clip_1.heavy_clip_enable;"
        self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 1, 0, 1)
    
    def create_command_jiaozhun(self, freq, chain):
        testconf = TestConf()
        if(string.atoi(freq)<5000):
            pcdac=testconf.get_2G_pcdac()
        else:
            pcdac=testconf.get_5G_pcdac()
        print "pcdac",pcdac,"freq",freq
        cmd_jiaozhun = "tx f="+freq+";ir=0;gi=0;txch="+chain+";rxch=1;pc=1000000;pl=1500;bc=1;retry=0;att=0;iss=0;stat=3;ifs=1;dur=600000;dump=0;pro=0;bssid=50.55.55.55.55.05;mactx=20.22.22.22.22.02;macrx=10.11.11.11.11.01;deaf=0;reset=-1;agg=1;cal=3;ht40=2;r=t0;pcdac="+pcdac+";pdgain=3;txgmaximum=120;"
        return cmd_jiaozhun
    
    def create_command_jiaozhun_cal(self, chain, power):
        cmd_jiaozhun_cal = "cal txchain="+chain+";power="+str(power)
        return cmd_jiaozhun_cal
    
    def create_command_jiaozhun_cal_last(self, chain, power):
        cmd_jiaozhun_cal = "cal txchain="+chain+";power="+str(power)+";last=1;"
        return cmd_jiaozhun_cal
    
    def get_power(self, rate):
        r = rate
        time = capture_time[r]
        if(debug != 0):
            self.printstr("capture time:"+str(time)+'\n',QColor(0, 0, 0, 110))
        ret = dll.LP_VsaDataCapture(c_double(time*1e-6), c_int(6), c_double(160e6), c_int(0), c_int(0))
        if(debug != 0):
            self.printstr("LP_VsaDataCapture:"+str(ret)+'\n',QColor(0, 0, 0, 110))
        if(ret != 0):
            self.t_geterr(ret)
        ret = dll.LP_AnalyzePower(c_double(0.0), c_double(0.0))
        if(ret != 0):
            self.t_geterr(ret)
        dll.LP_GetScalarMeasurement.restype = c_double
        P_av_no_gap_all_dBm = dll.LP_GetScalarMeasurement("P_av_no_gap_all_dBm", c_int(0));
        if(debug != 0):
            self.printstr("P_av_no_gap_all_dBm:"+str(P_av_no_gap_all_dBm)+'\n',QColor(0, 0, 0, 110))
        return P_av_no_gap_all_dBm
    
    def get_power_2(self, rate):
        ret = dll.LP_AnalyzePower(c_double(0.0), c_double(0.0))
        if(ret != 0):
            self.t_geterr(ret)
        dll.LP_GetScalarMeasurement.restype = c_double
        P_av_no_gap_all_dBm = dll.LP_GetScalarMeasurement("P_av_no_gap_all_dBm", c_int(0));
        return P_av_no_gap_all_dBm
    
    def get_power_param(self, param):
        ret = dll.LP_AnalyzePower(c_double(0.0), c_double(0.0))
        if(ret != 0):
            self.t_geterr(ret)
        dll.LP_GetScalarMeasurement.restype = c_double
        power_param = dll.LP_GetScalarMeasurement(param, c_int(0));
        return power_param
    
    def loop_jiaozhun(self, freq_all, chain_all):
        global dll
        for freq in freq_all:
            for chain in chain_all:
                path_lost = self.get_lost(freq)
                cmd = self.create_command_jiaozhun(freq, chain)
                if(debug != 0):
                    self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
                self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 1, 1, 0)
                
                self.dll_setvsa(string.atoi(freq), 5, 2)
                power = path_lost+self.get_power("t0")
                while(power < -999):
                    power = path_lost+self.get_power("t0")

                if(freq == "2462" and chain == "2" or freq == "5805" and chain == "2"):
                    self.loop_send_cmd_cal_power_real_last(chain, power, path_lost)
                else:
                    self.loop_send_cmd_cal_power_real(chain, power, path_lost)
    
    def telnet_exec_command_fenzhi(self, cmd, fenzhi, t, s_old=''):
        try:
            tn.write(cmd+"\n")
            time.sleep(t)
        except Exception as e:
            self.printstr('[ERR]\n',QColor(255, 0, 0, 220))
            self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
            self.printstr(u"error: {0}\n\n".format(e),QColor(255, 0, 0, 220))
            return ("",-2)
        try:
            s = s_old+tn.read_very_eager()
            self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
        except Exception as e:
            self.printstr('[ERR]\n',QColor(255, 0, 0, 220))
            self.printstr(u"error: {0}\n\n".format(e),QColor(255, 0, 0, 220))
            return ("",-2)
        for fi in fenzhi:
            if(fi in s):
                return (s,fenzhi.index(fi))
        return (s,-1)
    
    def loop_send_cmd_cal_power(self, chain, power=15.8, step=1, max_power=23):
        cmd = self.create_command_jiaozhun_cal(chain, power)
        (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.3, "")
        while(index != 0 and power <=max_power):
            if(index == -2 or index == -1):
                print "a: ", a
                print "index = ", index
                return index
            elif(index == 1):
                power = power + step
                cmd = self.create_command_jiaozhun_cal(chain, power)
                (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.3, a)
    
    def loop_send_cmd_cal_power_real(self, chain, power, path_lost, max_power=30):
        cmd = self.create_command_jiaozhun_cal(chain, power)
        (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.1, "")
        while(index != 0 and power <=max_power):
            if(index == -2 or index == -1):
                print "a: ", a
                print "index = ", index
                return index
            elif(index == 1):
                power = path_lost + self.get_power("t0")
                cmd = self.create_command_jiaozhun_cal(chain, power)
                (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.1, a)
    
    def loop_send_cmd_cal_power_real_last(self, chain, power, path_lost, max_power=30):
        cmd = self.create_command_jiaozhun_cal_last(chain, power)
        (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.1, "")
        while(index != 0 and power <=max_power):
            if(index == -2 or index == -1):
                print "a: ", a
                print "index = ", index
                return index
            elif(index == 1):
                power = path_lost + self.get_power("t0")
                cmd = self.create_command_jiaozhun_cal_last(chain, power)
                (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.1, a)
    
    def create_command_pinpian_jiaozhun(self):
        cmd_pinpian_jiaozhun = "tx f=2437;ir=0;gi=0;txch=1;rxch=1;pc=100;pl=1000;bc=1;retry=0;att=0;iss=0;stat=3;ifs=-1;dur=600000;dump=0;pro=0;bssid=50.55.55.55.55.05;mactx=20.22.22.22.22.02;macrx=10.11.11.11.11.01;deaf=0;reset=-1;agg=1;ht40=0;r=6;tp=target;carrier=1;xtalcal=1;"
        return cmd_pinpian_jiaozhun
    
    def create_command_pinpian_jiaozhun_5g(self):
        cmd_pinpian_jiaozhun = "tx f=5500;ir=0;gi=0;txch=1;rxch=1;pc=100;pl=1000;bc=1;retry=0;att=0;iss=0;stat=3;ifs=-1;dur=600000;dump=0;pro=0;bssid=50.55.55.55.55.05;mactx=20.22.22.22.22.02;macrx=10.11.11.11.11.01;deaf=0;reset=-1;agg=1;ht40=0;r=6;tp=target;carrier=1;xtalcal=1;"
        return cmd_pinpian_jiaozhun
    
    def create_command_pinpian_jiaozhun_xtal(self, chain, frequency):
        cmd_jiaozhun_cal = "xtal txchain="+chain+"; frequency="+str(frequency)+";"
        return cmd_jiaozhun_cal
    
    def get_highter_frequency(self, freq, freq_pool):
        for fi in freq_pool:
            if(fi > freq):
                return fi
        return 2436.995804
    
    def loop_send_cmd_xtal(self, chain, f=2436.905962):
        freq = f
        cmd = self.create_command_pinpian_jiaozhun_xtal(chain, f)
        (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.3, "")
        while(index != 0):
            if(index == -2 or index == -1):
                print "a: ", a
                print "index = ", index
                return index
            elif(index == 1):
                freq = self.get_highter_frequency(freq, [2436.905962,2436.950734,2436.979350,2436.995804])
                cmd = self.create_command_pinpian_jiaozhun_xtal(chain, freq)
                (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.3, a)
    
    def get_frequency(self):
        r = "6"
        time = capture_time[r]
        if(debug != 0):
            self.printstr("capture time::"+str(time)+'\n',QColor(0, 0, 0, 110))
        ret = dll.LP_VsaDataCapture(c_double(time*1e-6), c_int(6), c_double(160e6), c_int(0), c_int(0))
        if(debug != 0):
            self.printstr("LP_VsaDataCapture:"+str(ret)+'\n',QColor(0, 0, 0, 110))
        if(ret != 0):
            self.t_geterr(ret)
        ret = dll.LP_AnalyzeCWFreq()
        if(debug != 0):
            self.printstr("LP_AnalyzeCWFreq:"+str(ret)+'\n',QColor(0, 0, 0, 110))
        if(ret != 0):
            self.t_geterr(ret)
        
        dll.LP_GetScalarMeasurement.restype = c_double
        frequency = dll.LP_GetScalarMeasurement("frequency", c_int(0))
        if(debug != 0):
            self.printstr("frequency:"+str(frequency)+'\n',QColor(0, 0, 0, 110))
        return frequency
    
    def loop_send_cmd_xtal_real(self, chain, freq):
        frequency = self.get_frequency()
        f = frequency/1000000 + freq
        if(debug != 0):
            self.printstr("f:"+str(f)+'\n',QColor(0, 0, 0, 110))
        cmd = self.create_command_pinpian_jiaozhun_xtal(chain, f)
        (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.01, "")
        while(index != 0):
            if(index == -2 or index == -1):
                print "a: ", a
                print "index = ", index
                return index
            elif(index == 1):
                r = "6"
                time = capture_time[r]
                if(debug != 0):
                    self.printstr("capture time::"+str(time)+'\n',QColor(0, 0, 0, 110))
                ret = dll.LP_VsaDataCapture(c_double(time*1e-6), c_int(6), c_double(160e6), c_int(0), c_int(0))
                #注意：由于此处telnet返回字符串慢一拍，CONTROL DONE出现在下一次read_very_eager中，所以这里特殊处理
                if(ret != 0):
                    s = a+tn.read_very_eager()
                    if("7506 CONTROL DONE" in s):
                        return
                
                if(debug != 0):
                    self.printstr("LP_VsaDataCapture:"+str(ret)+'\n',QColor(0, 0, 0, 110))
                if(ret != 0):
                    self.t_geterr(ret)
                ret = dll.LP_AnalyzeCWFreq()
                if(debug != 0):
                    self.printstr("LP_AnalyzeCWFreq:"+str(ret)+'\n',QColor(0, 0, 0, 110))
                if(ret != 0):
                    self.t_geterr(ret)
        
                dll.LP_GetScalarMeasurement.restype = c_double
                frequency = dll.LP_GetScalarMeasurement("frequency", c_int(0))
                if(debug != 0):
                    self.printstr("frequency:"+str(frequency)+'\n',QColor(0, 0, 0, 110))
                
                f = frequency/1000000 + freq
                if(debug != 0):
                    self.printstr("f:"+str(f)+'\n',QColor(0, 0, 0, 110))
                cmd = self.create_command_pinpian_jiaozhun_xtal(chain, f)
                (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.01, a)
            else:
                return
    
    def loop_send_cmd_xtal_5g(self, chain, f=5499.873147):
        freq = f
        cmd = self.create_command_pinpian_jiaozhun_xtal(chain, f)
        (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.3, "")
        while(index != 0):
            if(index == -2 or index == -1):
                print "a: ", a
                print "index = ", index
                return index
            elif(index == 1):
                freq = self.get_highter_frequency(freq, [5499.873147,5499.949711,5499.994834])
                cmd = self.create_command_pinpian_jiaozhun_xtal(chain, freq)
                (a, index) = self.telnet_exec_command_fenzhi(cmd, ["7506 CONTROL DONE", "7511 INFO"], 0.3, a)
    
    def loop_pinpian_jiaozhun(self):
        global dll
        global test_mode
        if(test_mode == 2):
            cmd = self.create_command_pinpian_jiaozhun()
        else:
            cmd = self.create_command_pinpian_jiaozhun_5g()
        if(debug != 0):
            self.printstr(cmd+'\n',QColor(0, 0, 0, 110))
        self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 1, 1, 0)
        
        if(test_mode == 2):
            self.dll_setvsa(2437, 10, 2)
        else:
            self.dll_setvsa(5500, 10, 2)

        if(test_mode == 2):
            self.loop_send_cmd_xtal_real("1", 2437)
        else:
            self.loop_send_cmd_xtal_real("1", 5500)
    
    def get_rx_command_iss(self, rate):
        r_list = ["5l","11l","6","54","t7","t8","t15","t16","t23","f7","f8","f15","f16","f23","vt0","vt8","vt10","vt18","vt20","vt29","vf0","vf9","vf10","vf19","vf20","vf29","ve0","ve9","ve10",'ve19','ve20','ve29','vt7','vf7','ve7']
        iss_list = ["-90","-90","-82","-65","-65","-82","-64","-82","-64","-64","-79","-61","-79","-61","-82","-59","-82","-59","-82","-59","-79","-54","-79","-54","-79","-54","-76","-51","-76","-51","-76","-51","-65","-62","-59"]
        r_lower = rate.lower()
        index = r_list.index(r_lower)
        return iss_list[index]
    
    def after_rx(self):
        cmd = "commit"
        self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 1, 0, 1)
        cmd = "pcie"
        self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 1, 0, 1)
        cmd = "check"
        self.telnet_exec_command(u"测试",cmd,"CONTROL DONE "+cmd, 1, 0, 1)

    def get_5g_jiaozhun_power(self, freq, chain):
        global jiaozhun_5g_power
        index = freq+"_"+chain
        (first, second) = jiaozhun_5g_power[index]
        return (first, second)